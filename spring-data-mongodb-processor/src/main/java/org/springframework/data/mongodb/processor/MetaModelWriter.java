package org.springframework.data.mongodb.processor;

import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Collections;
import java.util.Map;

import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

/**
 * Responsible for writing meta model from context generated by
 * {@link MetaModelGenerator}.
 * <p/>
 * This implementation uses FreeMarker library.
 * 
 * @author mendlik
 * 
 */
public class MetaModelWriter {

	private final Logger logger;

	private final ProcessingEnvironment processingEnv;

	private final Configuration templateConfiguration;

	private static final String META_MODEL_TEMPLATE = "model.ftl";

	private static final String[][] UTIL_CLASS_TEMPLATES = new String[][] { {
			"array-field.ftl",
			"org.springframework.data.mongodb.processor.meta.ArrayField" } };

	public MetaModelWriter(ProcessingEnvironment processingEnv) {
		this.processingEnv = processingEnv;
		this.logger = new Logger(processingEnv);
		this.templateConfiguration = new Configuration();
		this.templateConfiguration.setClassForTemplateLoading(this.getClass(),
				"/");
	}

	public void write(Map<String, Object> context) {
		writeTemplate(context, META_MODEL_TEMPLATE, context.get("fileName")
				.toString());
	}

	public void writeUtilClasses() {
		for (String[] utilClass : UTIL_CLASS_TEMPLATES) {
			writeTemplate(Collections.<String, Object> emptyMap(),
					utilClass[0], utilClass[1]);
		}
	}

	public void writeTemplate(Map<String, Object> context,
			String templateFileName, String outputFileName) {
		Filer filer = processingEnv.getFiler();
		try {
			OutputStream os = filer.createSourceFile(outputFileName)
					.openOutputStream();
			PrintWriter pw = new PrintWriter(os);

			Template template = templateConfiguration
					.getTemplate(templateFileName);
			template.process(context, pw);

			pw.close();
			os.close();
		} catch (IOException | TemplateException e) {
			logger.error("Could not create source file for " + outputFileName
					+ ": " + e);
		}
	}
}
